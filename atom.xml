<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jmcd.io]]></title>
  <link href="http://jmcd.io/atom.xml" rel="self"/>
  <link href="http://jmcd.io/"/>
  <updated>2015-03-19T10:52:31+00:00</updated>
  <id>http://jmcd.io/</id>
  <author>
    <name><![CDATA[John McDowall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Method Access Modifiers as Code Smells]]></title>
    <link href="http://jmcd.io/blog/2015/03/18/private-methods-are-a-code-smell/"/>
    <updated>2015-03-18T21:11:01+00:00</updated>
    <id>http://jmcd.io/blog/2015/03/18/private-methods-are-a-code-smell</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a couple of patterns that I&rsquo;ve noticed in my own code.</p>

<h2>Private methods are a code smell</h2>

<p>Private methods are not inherently bad, but they are <strong>a sign</strong> that you might be missing out on an opportunity to make a useful abstraction. If you have a private method that calls another private method, then there is almost certainly an area of responsibility that remains unidentified.</p>

<p>If I have a class with a private method, then it&rsquo;s probably the result of me refactoring a piece of a public method, but not taking it to conclusion - I should keep going and move the method its own class!</p>

<p>I move a private method into its own class, and I am forced to think about its dependencies and API. Now it&rsquo;s automatically testable and re-composable.</p>

<p>Use cases:</p>

<ul>
<li>Private method with no dependencies - just move the method to a new class</li>
<li>Private method with dependencies on services - move the method to a new class, rationalize its dependiencies, use instances as a dependency of the parent.</li>
<li>Private method that uses mutates state - move the method to a new class, state mutation commands delivered from the method and interpreted by the parent.</li>
</ul>


<h2>Too many public methods are a code smell</h2>

<p>When I have a class with a load of public instance methods, it&rsquo;s unlikely that they all operate on the same state, or depend on the same objects.</p>

<p>If the methods don&rsquo;t operate on the same thing, then they don&rsquo;t belong together.</p>

<p>When I am thinking about the dependencies that I need to create an object (e.g. for testing), if all the dependencies are not used by all the methods, then maybe a red light should be flashing in my brain.</p>

<p>I see this a lot in ASP.NET MVC controller, where I have a controller that is notionally <em>about</em> a class of entity, but the sets of method depend on different things (database access, report outputs, email). Break it up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method Access Modifiers as Code Smells]]></title>
    <link href="http://jmcd.io/blog/2015/03/03/method-access-modifiers-as-code-smells/"/>
    <updated>2015-03-03T16:11:01+00:00</updated>
    <id>http://jmcd.io/blog/2015/03/03/method-access-modifiers-as-code-smells</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a couple of patterns that I&rsquo;ve noticed in my own code.</p>

<h2>Private methods are a code smell</h2>

<p>Private methods are not inherently bad, but they are <strong>a sign</strong> that you might be missing out on an opportunity to make a useful abstraction. If you have a private method that calls another private method, then there is almost certainly an area of responsibility that remains unidentified.</p>

<p>If I have a class with a private method, then it&rsquo;s probably the result of me refactoring a piece of a public method, but not taking it to conclusion - I should keep going and move the method its own class!</p>

<p>I move a private method into its own class, and I am forced to think about its dependencies and API. Now it&rsquo;s automatically testable and re-composable.</p>

<p>Use cases:</p>

<ul>
<li>Private method with no dependencies - just move the method to a new class</li>
<li>Private method with dependencies on services - move the method to a new class, rationalize its dependiencies, use instances as a dependency of the parent.</li>
<li>Private method that uses mutates state - move the method to a new class, state mutation commands delivered from the method and interpreted by the parent.</li>
</ul>


<h2>Too many public methods are a code smell</h2>

<p>When I have a class with a load of public instance methods, it&rsquo;s unlikely that they all operate on the same state, or depend on the same objects.</p>

<p>If the methods don&rsquo;t operate on the same thing, then they don&rsquo;t belong together.</p>

<p>When I am thinking about the dependencies that I need to create an object (e.g. for testing), if all the dependencies are not used by all the methods, then maybe a red light should be flashing in my brain.</p>

<p>I see this a lot in ASP.NET MVC controller, where I have a controller that is notionally <em>about</em> a class of entity, but the sets of method depend on different things (database access, report outputs, email). Break it up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Primer on Bluetooth Low Energy, and It's Application in iOS]]></title>
    <link href="http://jmcd.io/blog/2014/02/20/a-primer-on-bluetooth-low-energy-and-its-application-in-ios/"/>
    <updated>2014-02-20T00:00:00+00:00</updated>
    <id>http://jmcd.io/blog/2014/02/20/a-primer-on-bluetooth-low-energy-and-its-application-in-ios</id>
    <content type="html"><![CDATA[<h2>What is it?</h2>

<p>Bluetooth Low Energy (BLE) is a technology for allowing devices to communicate in a way that is highly optimized for conserving battery power.</p>

<p>BLE devices include things like FitBit trackers, heart-rate monitors, set-top-boxes, and fancy thermostats. The Internet of things. Very exciting possibilities!</p>

<p>BLE defined in the Bluetooth 4.0 specification, and is not compatible with older Bluetooth architectures.</p>

<p>BLE has far lower bit-rates than older technologies, and different radio setup. This means much better battery life for devices.</p>

<h2>The central and the peripheral</h2>

<p>When a BLE is connected to the other, one is termed the peripheral, the other is termed the central. The central is the consumer of data from the peripheral. For example, when you connect your iPhone to your FitBit, the iPhone is the central and the FitBit is the peripheral.</p>

<p>A central may have many peripherals, but a peripheral may (normally) only have one central.</p>

<p>The BLE device (e.g. FitBit) continually broadcasts advertisement packets. When another device (e.g. iPhone) wants to make a connection, it scans for these advertisement packets. Once an advertisement packet is discovered, a connection request is sent to the broadcaster. The broadcaster accepts the connection request, and the pair are peripheral and central.</p>

<h2>Services and characteristics</h2>

<p>Communication between connected central and peripheral takes place by reading and writing of characteristic values exposed by the peripheral. Characteristics are grouped into services. Services and characteristics are identified by unique identifiers. Characteristic values are 16 bytes long.</p>

<p><img src="http://jmcd.io/img/blutoot.png" title="hierarchy of device" ></p>

<p>A central can directly read the value of a characteristic, or it can register with the peripheral to receive updates when the value changes.</p>

<h2>iOS and CoreBluetooth</h2>

<p>The iOS SDK abstracts the complexities of BLE workings with the CoreBluetooth framework. The main players:</p>

<ul>
<li>CBCentralManager - discovers and connects to peripherals</li>
<li>CBPeripheral - represents a peripheral, discovers services, discovers characteristics</li>
<li>CBService - represents a service of a peripheral</li>
<li>CBCharacteristic - represents a characteristic of a service</li>
</ul>


<p>Discovery of peripherals, services, and characteristics all happen through asynchronous operations. Completions are signaled via callbacks on delegate implementations.</p>

<h2>An basic example</h2>

<p>In this example we will discover a fictional thermostat, and through a service:</p>

<ol>
<li>set the threshold temperature</li>
<li>ask to be notified of changes in the ambient temperature</li>
</ol>


<p>Discovery of peripherals is done by implementing CBCentralManagerDelegate, then scanning with a CBCentralManager. Before attempting to connect to a device, work out if you should, either by UUID, name, or user selection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">discoverPerhiperals</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="bp">CBCentralManager</span> <span class="o">*</span><span class="n">central</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CBCentralManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDelegate</span><span class="p">:</span><span class="nb">self</span> <span class="nl">queue</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'> <span class="p">[</span><span class="nb">self</span> <span class="nl">scan</span><span class="p">:</span><span class="n">central</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'> <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - CBCentralManagerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManager:</span><span class="p">(</span><span class="bp">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="nf">didDiscoverPeripheral:</span><span class="p">(</span><span class="bp">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">advertisementData:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">advertisementData</span> <span class="nf">RSSI:</span><span class="p">(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">RSSI</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="kt">BOOL</span> <span class="n">shouldConnect</span> <span class="o">=</span> <span class="cm">/* your code to determine if you should try to connect to this device */</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">shouldConnect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">central</span> <span class="n">stopScan</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">central</span> <span class="nl">connectPeripheral</span><span class="p">:</span><span class="n">peripheral</span> <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManager:</span><span class="p">(</span><span class="bp">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="nf">didConnectPeripheral:</span><span class="p">(</span><span class="bp">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="p">[</span><span class="nb">self</span> <span class="nl">discoverServicesForPeripheral</span><span class="p">:</span><span class="n">peripheral</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you are connected to a perhiperal, you can discover its services. You can discover services by UUID, or discover all the services a perhiperal hosts. Typically you will want to discover one or two well known services by id. - this is faster than discovering all services.</p>

<p>BLE UUIDs are 128 bit and have the form 0000nnnn-0000-1000-8000-00805f9b34fb, often you will see them abbreviated to 0xnnnn. (See page 216 of the  <a href="https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737">Bluetooth Specification V4.0 [Vol3]</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="n">_thermostatServiceUuid</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CBUUID</span> <span class="nl">UUIDWithString</span><span class="p">:</span><span class="s">@&quot;0000nnnn-0000-1000-8000-00805f9b34fb&quot;</span><span class="p">];</span>
</span><span class='line'> <span class="n">_heatingTurnsOnTemperatureCharacteristicUuid</span> <span class="o">=</span> <span class="bp">CBUUID</span> <span class="nl">UUIDWithString</span><span class="p">:</span><span class="s">@&quot;0000nnnn-0000-1000-8000-00805f9b34fb&quot;</span><span class="p">];</span>
</span><span class='line'> <span class="n">_currentAmbientTemperatureCharacteristicUuid</span> <span class="o">=</span> <span class="bp">CBUUID</span> <span class="nl">UUIDWithString</span><span class="p">:</span><span class="s">@&quot;0000nnnn-0000-1000-8000-00805f9b34fb&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">discoverServicesForPerhiperal</span><span class="p">:(</span><span class="bp">CBPeripheral</span><span class="o">*</span><span class="p">)</span><span class="n">peripheral</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="n">peripheral</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'> <span class="p">[</span><span class="n">peripheral</span> <span class="nl">discoverServices</span><span class="p">:</span><span class="l">@[</span><span class="n">_thermostatServiceUuid</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - CBPeripheralDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">peripheral</span><span class="p">:(</span><span class="bp">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="n">peripheral</span> <span class="nl">didDiscoverServices</span><span class="p">:(</span><span class="bp">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="bp">CBService</span> <span class="o">*</span><span class="n">service</span> <span class="o">=</span> <span class="n">peripheral</span><span class="p">.</span><span class="n">services</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'> <span class="p">[</span><span class="n">peripheral</span> <span class="nl">discoverCharacteristics</span><span class="p">:</span><span class="l">@[</span><span class="n">_heatingTurnsOnTemperatureCharacteristicUuid</span><span class="p">,</span> <span class="n">_currentAmbientTemperatureCharacteristicUuid</span><span class="l">]</span> <span class="nl">forService</span><span class="p">:</span><span class="n">service</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">peripheral</span><span class="p">:(</span><span class="bp">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="n">peripheral</span> <span class="nl">didDiscoverCharacteristicsForService</span><span class="p">:(</span><span class="bp">CBService</span> <span class="o">*</span><span class="p">)</span><span class="n">service</span> <span class="nl">error</span><span class="p">:(</span><span class="bp">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'> <span class="k">for</span> <span class="p">(</span><span class="bp">CBCharacteristic</span> <span class="o">*</span><span class="n">characteristic</span> <span class="k">in</span> <span class="n">service</span><span class="p">.</span><span class="n">characteristics</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">_heatingTurnsOnTemperatureCharacteristicUuid</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// Change the temperature at which the heating turns on</span>
</span><span class='line'>   <span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="cm">/* encode 16 bytes of data */</span>
</span><span class='line'>   <span class="p">[</span><span class="n">_peripheral</span> <span class="nl">writeValue</span><span class="p">:</span><span class="n">data</span> <span class="nl">forCharacteristic</span><span class="p">:</span><span class="n">characteristic</span> <span class="nl">type</span><span class="p">:</span><span class="n">CBCharacteristicWriteWithResponse</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">_currentAmbientTemperatureCharacteristicUuid</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// Register to receive notifications of changes to ambient temperature</span>
</span><span class='line'>   <span class="p">[</span><span class="n">peripheral</span> <span class="nl">setNotifyValue</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">forCharacteristic</span><span class="p">:</span><span class="n">characteristic</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">peripheral</span><span class="p">:(</span><span class="bp">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="n">peripheral</span> <span class="nl">didUpdateValueForCharacteristic</span><span class="p">:(</span><span class="bp">CBCharacteristic</span> <span class="o">*</span><span class="p">)</span><span class="n">characteristic</span> <span class="nl">error</span><span class="p">:(</span><span class="bp">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span> <span class="p">{</span>
</span><span class='line'> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;didUpdateValueForCharacteristic&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">([</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">_currentAmbientTemperatureCharacteristicUuid</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">characteristic</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;The current temperature is @%&quot;</span><span class="p">,</span> <span class="cm">/* decode 16 bytes of data */</span><span class="p">)</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Two Favourite Parts of the iOS 7 SDK]]></title>
    <link href="http://jmcd.io/blog/2013/09/18/my-two-favourite-parts-of-the-ios7-sdk/"/>
    <updated>2013-09-18T00:00:00+01:00</updated>
    <id>http://jmcd.io/blog/2013/09/18/my-two-favourite-parts-of-the-ios7-sdk</id>
    <content type="html"><![CDATA[<h2>Notifications and background downloading</h2>

<p>Prior to iOS 7, an inactive app is ignorant of notifications sent to the device. With iOS 7, an app can register to be woken when a notification arrives, in order to download data in the background. Imagine the you have a messaging app on your iOS 6 phone:</p>

<ul>
<li>Receive notification of new message</li>
<li>You tap notification to launch app</li>
<li><strong>You wait</strong> for app to connect to its server and download the message</li>
</ul>


<p>With iOS 7:</p>

<ul>
<li>Receive notification of new message</li>
<li>App starts up in the background and downloads message from its server</li>
<li>You tap notification to launch app, and <strong>the message is already there</strong></li>
</ul>


<p>An app running on iOS 7 can also request that the system give it regular background execution time to perform downloads. When you launch the Facebook app in the future, you may find that you do not have to wait for new posts to be downloaded, because the app has already downloaded them in the background.</p>

<p>If an app takes too long to download data in the background, uses too much power or data it will be given less opportunity to download in the future.</p>

<h2>Sprite Kit</h2>

<p>Most developers have an idea for a game, but have no idea how to write it. Game development is a whole different world from the type of business or web work that developers tend to do.</p>

<p>Sprite Kit is a framework that assists a developer creating 2D games by providing game-loop, facilities for graphics rendering, physics simulations and manipulation of in game objects. In short, it takes a lot of the grunt work out of creating a game.</p>

<p>Here I wrote a very small app using Sprite Kit. You tap the screen to set a car driving from the left of the screen. The car accelerates up to a maximum of 30mph, and maybe crashes into other cars. <a href="https://gist.github.com/jmcd/6605801#file-myscene-m">The code I had to write is less than 80 lines long</a>, Sprite Kit handles all the heavy lifting, leaving the developer free to concentrate on game logic.</p>

<p><video  preload='metadata' controls ><source src='http://jmcd.io/vid/SpriteKitDemo.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>Expect to see a lot of developers writing games where previously the barrier of entry was too high.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling MKMapView Annotation Pins on the Same Coordinate]]></title>
    <link href="http://jmcd.io/blog/2013/01/10/handling-annotation-pins-on-the-same-coordinate/"/>
    <updated>2013-01-10T00:00:00+00:00</updated>
    <id>http://jmcd.io/blog/2013/01/10/handling-annotation-pins-on-the-same-coordinate</id>
    <content type="html"><![CDATA[<p>A component of a project I am working on displays shop locations on a map. A problem arises when the shops are located at a shopping centre or mall - the shops are invariably geo-coded to the same latitude-longitude coordinates.</p>

<p>When the shops have the same coordinates, the annotations (pins) display in the exact same location on the map. This gives the appearance of there only being one pin, and indeed, the user can only tap one pin.</p>

<p>To overcome this, we implemented a routine to re-place the pins at new coordinates surrounding the contested coordinate.</p>

<p><img src="http://jmcd.io/img/Screen-Shot-2013-01-10-at-14.32.11.png" title="pins surrounding coord" ></p>

<p><em>tl;dr get the full <a href="https://gist.github.com/4502302">code</a>.</em></p>

<p>First we group the annotations by coordinate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">MKAnnotation</span><span class="o">&gt;</span> <span class="n">pin</span> <span class="k">in</span> <span class="n">annotations</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CLLocationCoordinate2D</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">pin</span><span class="p">.</span><span class="n">coordinate</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSValue</span> <span class="o">*</span><span class="n">coordinateValue</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithBytes</span><span class="p">:</span><span class="o">&amp;</span><span class="err">#</span><span class="mo">03</span><span class="mi">8</span><span class="p">;</span><span class="n">coordinate</span> <span class="nl">objCType</span><span class="p">:</span><span class="k">@encode</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">annotationsAtLocation</span> <span class="o">=</span> <span class="n">coordinateValuesToAnnotations</span><span class="p">[</span><span class="n">coordinateValue</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">annotationsAtLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">annotationsAtLocation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="n">coordinateValuesToAnnotations</span><span class="p">[</span><span class="n">coordinateValue</span><span class="p">]</span> <span class="o">=</span> <span class="n">annotationsAtLocation</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">annotationsAtLocation</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">pin</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This routine produces a dictionary keyed on <code>NSValue</code>s containing a copy of the coordinate (you can&rsquo;t key a <code>NSDictionary</code> on a c-type). The value of a entry in the dictionary is a <code>NSArray</code> of annotations at that coordinate.</p>

<p>You can see this only matches on exactly equal coordinates, but it would be relatively straightforward to group on coordinates that were close by calculating the distance between them.</p>

<p>Next we enumerate the dictionary looking for locations that have more than one annotation. When we find one, we reposition the annotations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">double</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">annotations</span><span class="p">.</span><span class="n">count</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">radiansBetweenAnnotations</span> <span class="o">=</span> <span class="p">(</span><span class="n">M_PI</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">annotations</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">annotations</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">heading</span> <span class="o">=</span> <span class="n">radiansBetweenAnnotations</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CLLocationCoordinate2D</span> <span class="n">newCoordinate</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">calculateCoordinateFrom</span><span class="p">:</span><span class="n">coordinate</span> <span class="nl">onBearing</span><span class="p">:</span><span class="n">heading</span> <span class="nl">atDistance</span><span class="p">:</span><span class="n">distance</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">id</span> <span class="o">&lt;</span><span class="bp">MKAnnotation</span><span class="o">&gt;</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">annotations</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">annotation</span><span class="p">.</span><span class="n">coordinate</span> <span class="o">=</span> <span class="n">newCoordinate</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The pins are arranged in a circle around the contested point by dividing the circle by the number of contesting annotations. You can see that the distance from the contested coordinate to the new coordinate is a function of the number of annotations contesting - if there are few pins contesting the coordinate, then we have space to place the pins close to the coordinate.</p>

<p>Finally, the new coordinate is calculated using an implementation of the function from this excellent resource: <a href="http://www.movable-type.co.uk/scripts/latlong.html">Destination point given distance and bearing from start point</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">)</span><span class="nf">calculateCoordinateFrom:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">)</span><span class="nv">coordinate</span> <span class="nf">onBearing:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">bearingInRadians</span> <span class="nf">atDistance:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">distanceInMetres</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">coordinateLatitudeInRadians</span> <span class="o">=</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">180</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">coordinateLongitudeInRadians</span> <span class="o">=</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">180</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">distanceComparedToEarth</span> <span class="o">=</span> <span class="n">distanceInMetres</span> <span class="o">/</span> <span class="mi">6378100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">resultLatitudeInRadians</span> <span class="o">=</span> <span class="n">asin</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">coordinateLatitudeInRadians</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">distanceComparedToEarth</span><span class="p">)</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">coordinateLatitudeInRadians</span><span class="p">)</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">distanceComparedToEarth</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">bearingInRadians</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">resultLongitudeInRadians</span> <span class="o">=</span> <span class="n">coordinateLongitudeInRadians</span> <span class="o">+</span> <span class="n">atan2</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">bearingInRadians</span><span class="p">)</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">distanceComparedToEarth</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">coordinateLatitudeInRadians</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">distanceComparedToEarth</span><span class="p">)</span> <span class="o">-</span> <span class="n">sin</span><span class="p">(</span><span class="n">coordinateLatitudeInRadians</span><span class="p">)</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">resultLatitudeInRadians</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CLLocationCoordinate2D</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="n">result</span><span class="p">.</span><span class="n">latitude</span> <span class="o">=</span> <span class="n">resultLatitudeInRadians</span> <span class="o">*</span> <span class="mi">180</span> <span class="o">/</span> <span class="n">M_PI</span><span class="p">;</span>
</span><span class='line'>    <span class="n">result</span><span class="p">.</span><span class="n">longitude</span> <span class="o">=</span> <span class="n">resultLongitudeInRadians</span> <span class="o">*</span> <span class="mi">180</span> <span class="o">/</span> <span class="n">M_PI</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop It Nintendo, No, You're Hurting Me]]></title>
    <link href="http://jmcd.io/blog/2013/01/07/stop-it-nintendo-no-you're-hurting-me/"/>
    <updated>2013-01-07T00:00:00+00:00</updated>
    <id>http://jmcd.io/blog/2013/01/07/stop-it-nintendo-no-you&#8217;re-hurting-me</id>
    <content type="html"><![CDATA[<p>In the early nineties I bought a SNES with Super Mario World. You could go from a boxed console to playing a game in minutes - all you had to do was plug a few cables in.</p>

<p>Yesterday I got a Wii U. The setup process was so long winded and exasperating that it would make the calmest fanboy wonder whether there is any Nintendo employee with the responsibility of &ldquo;giving a fuck about user experience&rdquo;.</p>

<p>It&rsquo;s like they have excellent low level developers, excellent game developers, but didn&rsquo;t think how they would plug everything together.</p>

<pre><code>INT. NINTENDO HQ, THE MOON

Game Devs: OK, were done with the new Mario game, it is sweeeet!
Sys Devs: Shut up guys - we're busy here busting our ass doing something important with a kernel and raster bliting. For all you know.
GD: You're jealous, wait till you see the new suit Mario has!
SD: ...
GD: It's the Super Acorn Flying Squirrel Suit!
SD: Jesus.
GD: When you get it, Mario has a tail and can glide and everything!
SD: Isn't that the exact same thing as the Raccoon suit from Super Mario Bros 3?
GD: IT'S SIMILAR BUT DISTINCT
SD: Oh, go on then, show us.
GD: If you would get a bend on and finish writing the system shell we would show you!
SD: The shell is YOUR responsibility FFS!
GD: But... we thought you were writing it...
SD: Oh man, we are fucked!
GD: Don't panic, don't panic, I think we have some garbage old Wii UI code on a thumb drive.
Manager: What's all this carry on, don't you know we launch in five days time?!
SD: Hi boss. We were just discussing how we were going to handle, err, handle ... system updates! Yes that sounds feasible.
M:  And how are they going to handle it?
SD: Through a massive non-delta patch downloaded at first boot of course!
M:  Excellent! One question though.
SD: Yes?
M:  "down" "load"?
SD: From the Internet.
M:  "inter"...
SD: You requestioned the bandwidth, right?
M:  Guys, I'm going home. This fine liquor isn't going to drink itself.
</code></pre>

<h2>System Update</h2>

<p>The box arrived at the office. I thought it a good idea to set it up and download any updates while I was at work, that way the machine would be ready to go by hometime. See? I am smart! The Wii U refused to connect to the WPA2 Personal network, even with security turned off. At the time I was disappointed to be denied updates until home, but it turned out I had dodged a bullet - a bullet made of progress bars and crazy.</p>

<p>Once safely ensconced in my Fortress Of Solitude, I assembled the system and successfully connected to the wifi in my flat.</p>

<p>GREAT! HERE WE GO! YES I WOULD LIKE TO UPDATE THANKYOU!</p>

<p>I was past the Rubicon. A warning message told me not to try anything funny with the power buttons, and I had heard scare stories of users who had bricked consoles by powering down during updates. I would just wait for that little progress bar to move along. Except it wasn&rsquo;t moving. It was stuck, with 0% progress. Through the power of concentration and scowling, I transmitted powerful brain signals to the Wii U that eventually made the progress bar move - HOORAY! HOORAY FOR PROGRESS BAR PROGRESS!</p>

<p>The progress bar on the Wii U is accompanied by a high pitched &ldquo;dididi dididi&rdquo; sound. The system update took almost two hours to download. You will probably want to turn the sound down or something.</p>

<p>The length of time the update took to download makes me think that either:</p>

<ul>
<li>This is a big download</li>
<li>Nintendo do not have bandwidth</li>
<li>This is a big download and Nintendo do not have bandwidth</li>
<li>So, probably a huge download of entirely new system software and firmware. Not a delta-update. Thanks.</li>
</ul>


<h2>Let&rsquo;s Play a Game!</h2>

<p>The console came bundled with Nintendo Land, but I didn&rsquo;t want to play that because it&rsquo;s for kids. I wanted to play the one where a cute cartoon plumber runs around a candy-cane world eating magic plants, so I headed to the &ldquo;eShop Channel&rdquo; to buy it online.</p>

<p>I am buying all my stuff without media now, because I am from the future.</p>

<p>Now I have bought the game and it has downloaded. HA, fooled you! I haven&rsquo;t, and it hasn&rsquo;t. I have to connect my Mii to my Nintendo Network Id first. Of course I do!</p>

<p>Do I have a Nintendo Network Id? Do I need to make a new one? I have one already, yes, I am certain. I used it years ago. I remember I would feverishly collect &ldquo;stars&rdquo; by registering purchases in order to claim prizes, which promised to be stuff like a gold Gameboy but turned out to be stuff like a JPEG of a mushroom playing football.</p>

<p>I go to my computer to see if I can remember my details. I can! I am so smart! Oh, but the Wii U says the details are bad. I investigate and find that I was entering the details for my &ldquo;Club Nintendo&rdquo; account, which is actually a different thing from a Nintendo Network Id. Boy did I feel stupid, but I guess anyone could make that mistake.</p>

<p>Wait - &ldquo;Club Nintendo&rdquo;, that rang a bell. My 3DS (I have a 3DS because I am cool) is always moaning at me to connect its eShop to my Club Nintendo account. Ergo, my 3DS has a Nintendo Network Id. I navigate the 3DS eShop and successfully link it to my Club Nintendo account. Now I just need to find my Nintendo Network Id. I can&rsquo;t find it. Maybe its my Mii friend sharing code? No, it isn&rsquo;t.</p>

<p>Turns out, my Club Nintendo account, 3DS eShop registration, friend code, previous Wii shop registration are all distinct entities, and none of them are a Nintendo Network Id. I have to create a new one. Stupid John, stupid stupid John. How could I not have known this?</p>

<p>I create a new Nintendo Network Id. All the glory of the eShop is mine. All these multiple accounts will be fine, so long as I remember the distinctions and security details and passwords for credit cards. No biggie.</p>

<p>I buy New Super Mario Bros Wii U. I love the name of this game. It is a name that is technically correct, the best kind of correct. The eShop tells me that I can view the progress of the download in the Download Manager. I in-expertly try to navigate to the Download Manager, tapping on many things that are not the Download Manager. It is at this point that it is apparent that programs take a long time to launch on the Wii U. Each program launch takes many seconds, and I am impatient. I can feel my life ending as I wait for the stupid program, that I didn&rsquo;t even want to load, to load.</p>

<p>Success! I have launched the Download Manager. &ldquo;Estimating Time Remaining&rdquo;. Tense. Wait for it. Ohhhhh, four hours?!</p>

<p>One of the cool things about the Wii U is that you can turn your TV onto another channel and waste your life watching some garbage like America&rsquo;s Next Top Dancing Glee Ice Sharks, and STILL monitor Wii U progress bars on the secondary baby screen. It&rsquo;s called science.</p>

<p>The progress bar chugs along for 20 minutes then disappears. &ldquo;Error&rdquo;. Error? &ldquo;Try downloading again later&rdquo;. Try later? How? There are no controls to retry or resume the download. In the end, it seems that the Wii U itself will try again later, so maybe those notes were for itself, so it would remember. The download restarts.</p>

<p>Several hours more pass, but it feels longer. Perhaps in the years that I have been waiting for downloads, the Wii U has been obsoleted by a flying XBox. Yes, probably.</p>

<p>The download completes. The Download Manager tells me that I must install the download before playing. I would like to ask the Download Manager why it doesn&rsquo;t just install the download for me, but it probably wouldn&rsquo;t understand, or would just tell me that it &ldquo;wasn&rsquo;t his department&rdquo;. I tap to install, and a while later I am the victor.</p>

<p>I go to the home screen, and tap the icon to start the game. It starts, and by &ldquo;starts&rdquo;, I mean it starts downloading an update.</p>

<p>NO FUCKING WAY NO WAY NO WAY?! That thing that I just downloaded? That multi-gigabyte blob transmitted through wet string? That was not the most up-to-date version?! It wasn&rsquo;t, and I endure another twenty minutes of downloading, followed by some minutes of updates.</p>

<p>(Other programs that are bundled with the console (YouTube, Netflix) also have available updates on first launch, even after you have applied the mega system update. This is literally incredible.)</p>

<p>I am finally into the game and it is pretty great. Pretty, pretty great.</p>

<h2>Wii System Transfer</h2>

<p>The Wii U is compatible with Wii software via the Wii channel. Turning on the Wii channel basically sets your Wii U into a Wii mode. The two modes are entirely segregated - there is no nice integration like having Wii channels show up on your Wii U home screen, or transfer of shop credits. It&rsquo;s full-on segregated emulation or simulation.</p>

<p>The Wii System Transfer lets me transfer stuff from a stupid old Wii to a fancy new Wii U. Stupid old Wii, what person would want you now?</p>

<p>Nintendo realize that is not a good idea to have too many people transferring data from old Wiis, because they would end up selling them at Cash Converters, and that would depress the price of new hardware. To this end, Nintendo have deliberately made the Wii System Transfer the most convoluted protocol possible, so as only the most perseverant soul will enjoy their Skyward Sword savegames on the Wii U.</p>

<p>Nintendo probably had a shortlist of protocols for performing the transfer.</p>

<ul>
<li>An ad-hoc network using custom protocol, à la AirDrop in OS X. &lt;&ndash; Too easy to use. REJECTED</li>
<li>Direct Bluetooth communication. &lt;&ndash; Customer might not have enough close power sockets to create bluetooth network. REJECTED</li>
<li>Detection of both devices on a common wifi network. &lt;&ndash; I like to steal my neigbours&#8217; wifi, this will cause problems. REJECTED</li>
<li>Secure upload of Wii data to a server on the Internet, download via key. &lt;&ndash; No, because&hellip; just because. REJECTED</li>
<li>An absolutely cuckoo bananas hybrid of Internet connectivity AND, unbelievably, SD card swapping. &lt;&ndash; WINNAR!</li>
<li>So they chose the last one. It&rsquo;s pretty crazy, but not quite crazy enough. To really make people dizzy Nintendo hit you with the channel download thing.</li>
</ul>


<p>To start the process off, there is a channel on the Wii U home screen. It is called Wii System Transfer. I launch this program and it explains some of the comically circuitous journey I am starting, it then tells me to download the Wii System Transfer program. I thought I was in the Wii System Transfer, because I launched a program with the same name? Stupid John. Stupid, stupid John.</p>

<p>I download the Wii System Transfer channel as instructed. I now have two channels called Wii System Transfer! With the same icon! One is the shell program, one is the actual program. They are distinguished by one having marquee style scrolling text.</p>

<p>I start the program. It has eight pages of steps explaining about the transfer and switching SD cards. I go through the pages, and insert the SD card. I dunno, I must have been drunk or something, because it turns these steps are not actually doing anything, they are just eight pages of explanations. D&#8217;oh. Stupid John. I finally get to the part where I prepare the SD card, and have to do things to the rubbish old Wii.</p>

<p>Now I have to download the Wii System Transfer program on the old Wii. The instructions tell me it&rsquo;s OK to turn off the Wii U if I don&rsquo;t have enough power sockets, but I pitty the souls who only have a single Wiimote, as they will have to unpair and pair the Wiimote as they switch system. I power up the old Wii. It&rsquo;s been a month or two since I used this machine, so it needs a system update. OK. I am numb now, so that is OK. I go to the eShop, find the program (it is scrolled off the bottom of the eShop home screen) install it, and transfer the data.</p>

<p>The process is especially crushing because it keeps saying &ldquo;Wii&rdquo; too much, and your brain starts to do that thing where repeated words don&rsquo;t make sense any more. Verbatim: &ldquo;Wii Points Transferred. 100 Wii Points have been transferred. You can use these Wii Points in the Wii Shop Channel on the target Wii U console&rsquo;s Wii Menu&rdquo;.</p>

<p>The actual transfer process is animated by those whimsical Pikmin carrying visual representations of your data to a rocket, then blasting off to a planet labeled &ldquo;Wii U&rdquo; - cute.</p>

<p>Now I have my Wii data on my Wii U. I am so smart. Wait! My Wii was one of the original ones with GameCube compatibility, that means that if I want to play Super Mario 64 I have to play it on, <em>shudder</em>, the classic controller! Nooooooooooo!</p>

<p>Fuck it, I&rsquo;ll just get my N64 out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selecting Denormalized Child Nodes and Parents From Tree With Linq]]></title>
    <link href="http://jmcd.io/blog/2009/08/05/selecting-denormalized-child-nodes-and-parents-from-tree-with-linq/"/>
    <updated>2009-08-05T00:00:00+01:00</updated>
    <id>http://jmcd.io/blog/2009/08/05/selecting-denormalized-child-nodes-and-parents-from-tree-with-linq</id>
    <content type="html"><![CDATA[<p>Problem: You have a collection of objects.&#160; Each object has a number of children.&#160; You want all the children matching a criteria, AND the parent.&#160; The child does not reference the parent.</p>

<p>Solution: You can use Linq to</p>

<ul>
<li>From the context of all the parents, select all the children with the “SelectMany” method.</li>
<li>Construct and select instances of an anonymous type combining the parent and child.&#160; (You can do this because the context is that of the parent.)</li>
<li>Apply your filtering criteria.</li>
</ul>


<p>Example: Select the five most recently modified children (and parent)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">allParents</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StupidFactory</span><span class="p">().</span><span class="n">ConstructParents</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">fiveMostRecentChildrenAndParent</span> <span class="p">=</span> <span class="n">allParents</span>
</span><span class='line'>            <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">parent</span> <span class="p">=&gt;</span> <span class="n">parent</span><span class="p">.</span><span class="n">Children</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">child</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Child</span> <span class="p">=</span> <span class="n">child</span><span class="p">,</span> <span class="n">Parent</span> <span class="p">=</span> <span class="n">allParents</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">parent</span> <span class="p">=&gt;</span> <span class="n">parent</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">child</span><span class="p">)).</span><span class="n">Single</span><span class="p">()</span> <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">anonymousCombo</span> <span class="p">=&gt;</span> <span class="n">anonymousCombo</span><span class="p">.</span><span class="n">Child</span><span class="p">.</span><span class="n">LastModified</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">childAndParent</span> <span class="k">in</span> <span class="n">fiveMostRecentChildrenAndParent</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} modified on {1} (belongs to {2})&quot;</span><span class="p">,</span> <span class="n">childAndParent</span><span class="p">.</span><span class="n">Child</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">childAndParent</span><span class="p">.</span><span class="n">Child</span><span class="p">.</span><span class="n">LastModified</span><span class="p">.</span><span class="n">ToShortDateString</span><span class="p">(),</span> <span class="n">childAndParent</span><span class="p">.</span><span class="n">Parent</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Entity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Parent</span> <span class="p">:</span> <span class="n">Entity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Child</span><span class="p">&gt;</span> <span class="n">Children</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Child</span><span class="p">&gt;();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Child</span> <span class="p">:</span> <span class="n">Entity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">LastModified</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">StupidFactory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Random</span> <span class="n">_random</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">int</span> <span class="n">_childCount</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">int</span> <span class="n">_parentCount</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">Child</span> <span class="nf">ConstructChild</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Child</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Child_&quot;</span> <span class="p">+</span> <span class="n">_childCount</span><span class="p">++,</span> <span class="n">LastModified</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(-</span><span class="n">_random</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">365</span><span class="p">))</span> <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">Parent</span> <span class="nf">ConstructParent</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Parent</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Parent_&quot;</span> <span class="p">+</span> <span class="n">_parentCount</span><span class="p">++</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">childCount</span> <span class="p">=</span> <span class="n">_random</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">11</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">childCount</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">ConstructChild</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">Parent</span><span class="p">&gt;</span> <span class="n">ConstructParents</span><span class="p">(</span><span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Parent</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">ConstructParent</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caching the Result of Arbitrary Function Calls]]></title>
    <link href="http://jmcd.io/blog/2009/08/05/caching-the-result-of-arbitrary-function-calls/"/>
    <updated>2009-08-05T00:00:00+01:00</updated>
    <id>http://jmcd.io/blog/2009/08/05/caching-the-result-of-arbitrary-function-calls</id>
    <content type="html"><![CDATA[<p>Here is the approach I took to performing the result of a method call, which is done in a reusable way which may be interesting.  Instead of calling my method normally like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyService</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">time</span> <span class="p">=</span> <span class="n">service</span><span class="p">.</span><span class="n">GetTime</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrap that call in a call to the cache:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyService</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">time</span> <span class="p">=</span> <span class="n">cache</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">GetTime</span><span class="p">(),</span> <span class="n">service</span><span class="p">,</span> <span class="n">tenSeconds</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the Cache implementation I have a method Get, which wraps up the method call in a wrapping function, then passes this parcel to the InvokeOrGetFromCache method:</p>

<p>There is a variant of “Get” for every variant of Func&lt;>.</p>

<p>The InvokeOrGetFromCache is the meat of the cache class.&#160; It controls access two the actual store of objects (a dictionary of function to result), and a collection of pending functions (a hashset).</p>

<p>When requesting a result for a function from the cache, the pending set is first checked.&#160; If the job is already pending, the requesting thread yields until the job is done.</p>

<p>When a function’s result is not present in the cache, it is added to the pending functions set.&#160; The function is invoked, its result is added to the cache, then the function is removed from the pending set.</p>

<p><em>NB</em> As you can see, the key to the cache is just the function itself – this means that calls with different instances/values will result in the same result.&#160; This is fine for my purposes, but may not be OK for you.&#160; In this case it would be fairly straightforward to build a new key which incorporated the values as well as the function itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cache</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="n">CachedItem</span><span class="p">&gt;</span> <span class="n">_registry</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="n">CachedItem</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">_pending</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">TResult</span> <span class="n">Get</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;</span> <span class="n">func</span><span class="p">,</span> <span class="n">T</span> <span class="n">t</span><span class="p">,</span> <span class="n">TimeSpan</span> <span class="n">maximumAge</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">InvokeOrGetFromCache</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">maximumAge</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">func</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">TResult</span> <span class="n">Get</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;</span> <span class="n">func</span><span class="p">,</span> <span class="n">T1</span> <span class="n">t1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">t2</span><span class="p">,</span> <span class="n">TimeSpan</span> <span class="n">maximumAge</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">InvokeOrGetFromCache</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">maximumAge</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">func</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">TResult</span> <span class="n">Get</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">T3</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">T3</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;</span> <span class="n">func</span><span class="p">,</span> <span class="n">T1</span> <span class="n">t1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">t2</span><span class="p">,</span> <span class="n">T3</span> <span class="n">t3</span><span class="p">,</span> <span class="n">TimeSpan</span> <span class="n">maximumAge</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">InvokeOrGetFromCache</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">maximumAge</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">func</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">,</span> <span class="n">t3</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">TResult</span> <span class="n">Get</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">T3</span><span class="p">,</span> <span class="n">T4</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">T3</span><span class="p">,</span> <span class="n">T4</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;</span> <span class="n">func</span><span class="p">,</span> <span class="n">T1</span> <span class="n">t1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">t2</span><span class="p">,</span> <span class="n">T3</span> <span class="n">t3</span><span class="p">,</span> <span class="n">T4</span> <span class="n">t4</span><span class="p">,</span> <span class="n">TimeSpan</span> <span class="n">maximumAge</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">InvokeOrGetFromCache</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">maximumAge</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">func</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">,</span> <span class="n">t3</span><span class="p">,</span> <span class="n">t4</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">TResult</span> <span class="n">InvokeOrGetFromCache</span><span class="p">&lt;</span><span class="n">TResult</span><span class="p">&gt;(</span><span class="kt">object</span> <span class="n">cacheKey</span><span class="p">,</span> <span class="n">TimeSpan</span> <span class="n">maximumAge</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TResult</span><span class="p">&gt;</span> <span class="n">wrapperFunc</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">now</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">WaitForPendingInvokeToComplete</span><span class="p">(</span><span class="n">cacheKey</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">lock</span><span class="p">(</span><span class="n">_registry</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_registry</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">cacheKey</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_registry</span><span class="p">[</span><span class="n">cacheKey</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">TimeOfConstruction</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">maximumAge</span><span class="p">)</span> <span class="p">&gt;</span> <span class="n">now</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="p">(</span><span class="n">TResult</span><span class="p">)</span> <span class="n">result</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nf">Invoke</span><span class="p">(</span><span class="n">cacheKey</span><span class="p">,</span> <span class="n">now</span><span class="p">,</span> <span class="n">wrapperFunc</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">TResult</span> <span class="n">Invoke</span><span class="p">&lt;</span><span class="n">TResult</span><span class="p">&gt;(</span><span class="kt">object</span> <span class="n">cacheKey</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">now</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TResult</span><span class="p">&gt;</span> <span class="n">wrapperFunc</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_pending</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">cacheKey</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="k">value</span> <span class="p">=</span> <span class="n">wrapperFunc</span><span class="p">.</span><span class="n">Invoke</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_registry</span><span class="p">[</span><span class="n">cacheKey</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CachedItem</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_pending</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">cacheKey</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">WaitForPendingInvokeToComplete</span><span class="p">(</span><span class="kt">object</span> <span class="n">cacheKey</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">_pending</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">cacheKey</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">class</span> <span class="nc">CachedItem</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">CachedItem</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">timeOfConstruction</span><span class="p">,</span> <span class="kt">object</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">TimeOfConstruction</span> <span class="p">=</span> <span class="n">timeOfConstruction</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">TimeOfConstruction</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">object</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Expression Trees to Avoid String Literal References]]></title>
    <link href="http://jmcd.io/blog/2009/06/30/using-expression-trees-to-avoid-string-literal-references/"/>
    <updated>2009-06-30T00:00:00+01:00</updated>
    <id>http://jmcd.io/blog/2009/06/30/using-expression-trees-to-avoid-string-literal-references</id>
    <content type="html"><![CDATA[<p>Often a developer will want to mirror the names of properties or methods of a class in some related dynamic resource that needs to bind to named members of the class. This happens a lot in user interface and serialization scenarios.</p>

<p>For example, a user interface may need to populate the value of a text-box with a value dynamically looked up from a property on an instance of a class.  Typically, this is done with a hard-coded string literal.</p>

<p>To avoid using hard-coded member names, expression trees can be used to define members, then utility code can translate that tree to a string.  The advantage here is that refactoring is pretty much guaranteed to work, and you get compile time checking.</p>

<p>So, lets say I have the following class, and I am interested in writing the the names of the members to the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">class</span> <span class="nc">MyType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">AStringProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">object</span> <span class="nf">GetAnObject</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">object</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetAnInt</span><span class="p">(</span><span class="kt">string</span> <span class="n">a1</span><span class="p">,</span> <span class="kt">string</span> <span class="n">a2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a small amount of utility code, I can achieve my goal without string literals or resorting to reflection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Name</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">MyType</span><span class="p">&gt;(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">AStringProperty</span><span class="p">));</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Name</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">MyType</span><span class="p">&gt;(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">GetAnObject</span><span class="p">()));</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Name</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">MyType</span><span class="p">&gt;(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">GetAnInt</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which results in console output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">AStringProperty</span>
</span><span class='line'><span class="n">GetAnObject</span>
</span><span class='line'><span class="n">GetAnInt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Utility Code The <i>Name</i> class has a single static method <i>Of</i>, which uses another the </i>ExpressionFinder</i> class to work out the member or method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">class</span> <span class="nc">Name</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">Of</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ExpressionMemberFinder</span><span class="p">.</span><span class="n">FindMemberOrNull</span><span class="p">(</span><span class="n">expr</span><span class="p">).</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ExpressionMemberFinder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">MemberInfo</span> <span class="nf">FindMemberOrNull</span><span class="p">(</span><span class="n">Expression</span> <span class="n">expression</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">expression</span><span class="p">.</span><span class="n">NodeType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">ExpressionType</span><span class="p">.</span><span class="n">Convert</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">FindMemberOrNull</span><span class="p">(((</span><span class="n">UnaryExpression</span><span class="p">)</span> <span class="n">expression</span><span class="p">).</span><span class="n">Operand</span><span class="p">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">ExpressionType</span><span class="p">.</span><span class="n">Lambda</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">FindMemberOrNull</span><span class="p">(((</span><span class="n">LambdaExpression</span><span class="p">)</span> <span class="n">expression</span><span class="p">).</span><span class="n">Body</span><span class="p">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">ExpressionType</span><span class="p">.</span><span class="n">Call</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">((</span><span class="n">MethodCallExpression</span><span class="p">)</span> <span class="n">expression</span><span class="p">).</span><span class="n">Method</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">ExpressionType</span><span class="p">.</span><span class="n">MemberAccess</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">((</span><span class="n">MemberExpression</span><span class="p">)</span> <span class="n">expression</span><span class="p">).</span><span class="n">Member</span><span class="p">;</span>
</span><span class='line'>            <span class="k">default</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s worth noting that the only type of expression tree we can work on is one that ends in a single method-call or member-access.  It doesn&rsquo;t make any sense to work on a tree with branches or multiple leaf nodes.</p>

<p>Lets examine what happens in the FindMemberOrNull method by looking at three kinds of tree that we can handle.</p>

<h2>Behaviour #1, Finding a Property Access</h2>

<p>Name.Of&lt;MyType&gt;(x =&gt; x.AStringProperty));</p>

<ul>
<li>FindMemberOrNull is called with a lambda {x =&gt; x.AStringProperty}</li>
<li>FindMemberOrNull is called from within itself with the lambda&rsquo;s body, a member-expression {x =&gt; x.AStringProperty}</li>
<li>The member-expression&rsquo;s member is returned</li>
</ul>


<h2>Behaviour #2, Finding a Method That Returns an Object</h2>

<p>Name.Of&lt;MyType&gt;(x =&gt; x.GetAnObject()));</p>

<ul>
<li>FindMemberOrNull is called with a lambda {x =&gt; x.GetAnObject() }</li>
<li>FindMemberOrNull is called from within itself with the lambda&rsquo;s body, a method-call-expression {x =&gt; x.GetAnObject()}</li>
<li>The method-call-expression&rsquo;s method is returned</li>
</ul>


<h2>Behaviour #3, Finding a Method That Returns an Something Other Than an Object</h2>

<p>Name.Of&lt;MyType&gt;(x.GetAnInt(null, null))); Slightly more interesting behaviour here.</p>

<ul>
<li>As the FindMemberOrNull method accepts a expression describing a function that returns System.Object, the compiler automatically wraps the expression in a unary-expression which converts from Expression&lt;Func&lt;MyType, int&gt;&gt; to Expression&lt;Func&lt;MyType, object&gt;&gt;.  - NICE!</li>
<li>FindMemberOrNull is called with a lambda {x =&gt; Convert(x.GetAnInt(null, null))}</li>
<li>FindMemberOrNull is called from within itself with the lambda&rsquo;s body, a unary-expression {x =&gt;Convert(x.GetAnInt(null, null))}</li>
<li>FindMemberOrNull is called from within itself with the unary-expression&rsquo;s operand, a method-call-expression {x =&gt; x.GetAnInt(null, null)}</li>
<li>The method-call-expression&rsquo;s method is returned</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Model Validation With ASP.NET MVC, xVal, Castle and a Custom Binder]]></title>
    <link href="http://jmcd.io/blog/2009/04/07/automatic-model-validation-with-asp-net-mvc-xval-castle-and-a/"/>
    <updated>2009-04-07T00:00:00+01:00</updated>
    <id>http://jmcd.io/blog/2009/04/07/automatic-model-validation-with-asp-net-mvc-xval-castle-and-a</id>
    <content type="html"><![CDATA[<p>There are several stages at which you can, and possibly should, validate data inputted to your application.  This post deals with server-side validation of user input before it reaches the controller.  It’s arguably not the controller’s responsibility to validate user input, and it’s nice to have a clean controller that can focus on its responsibility.  In this solution we tap into the ASP.NET MVC Model Binder framework so our controllers can count on the model having been validated before any of the action methods are called.</p>

<p><a href="http://xval.codeplex.com/">xVal</a> is a nice validation framework written by <a href="http://blog.codeville.net/">Steve Sanderson</a>.  It can work with a bunch of server-side and client-side validation products.  I this case I’m going to use the server-side <a href="http://erichauser.net/2008/08/28/castle-validator-enhancements/">Castle Validator</a>.</p>

<p>Once you have downloaded and referenced xVal and Castle Validator, you can decorate your model properties with attributes like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Castle.Components.Validator</span><span class="p">;</span>
</span><span class='line'><span class="k">namespace</span> <span class="nn">Wow.MvcApplication.Models</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'><span class="na">     [ValidateNonEmpty]</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="kt">string</span> <span class="n">MiddleName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">     </span>
</span><span class='line'><span class="na">     [ValidateNonEmpty]</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">     </span>
</span><span class='line'><span class="na">     [ValidateDate]</span>
</span><span class='line'>      <span class="k">public</span> <span class="n">DateTime</span> <span class="n">Dob</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we implement the validation runner that wraps up the Castle runner and returns validation data in xVal form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Castle.Components.Validator</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">xVal.ServerSide</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">SomeMvcApplication</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">CastleValidationRunner</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">CachedValidationRegistry</span> <span class="n">registry</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CachedValidationRegistry</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">ErrorInfo</span><span class="p">&gt;</span> <span class="n">GetErrors</span><span class="p">(</span><span class="kt">object</span> <span class="n">instance</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ErrorInfo</span><span class="p">&gt;();</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">runner</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ValidatorRunner</span><span class="p">(</span><span class="n">registry</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">runner</span><span class="p">.</span><span class="n">IsValid</span><span class="p">(</span><span class="n">instance</span><span class="p">))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="kt">var</span> <span class="n">errorSummary</span> <span class="p">=</span> <span class="n">runner</span><span class="p">.</span><span class="n">GetErrorSummary</span><span class="p">(</span><span class="n">instance</span><span class="p">);</span>
</span><span class='line'>              <span class="kt">var</span> <span class="n">errorInfos</span> <span class="p">=</span> <span class="n">errorSummary</span><span class="p">.</span><span class="n">InvalidProperties</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span>
</span><span class='line'>                  <span class="n">prop</span> <span class="p">=&gt;</span> <span class="n">errorSummary</span><span class="p">.</span><span class="n">GetErrorsForProperty</span><span class="p">(</span><span class="n">prop</span><span class="p">),</span>
</span><span class='line'>                  <span class="p">(</span><span class="n">prop</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">ErrorInfo</span><span class="p">(</span><span class="n">prop</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
</span><span class='line'>              <span class="p">);</span>
</span><span class='line'>              <span class="n">result</span><span class="p">.</span><span class="n">AddRange</span><span class="p">(</span><span class="n">errorInfos</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a Model Binder that uses the new validation runner to populate ModelState:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System.Web.Mvc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">SomeMvcApplication</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">ValidatingModelBinder</span> <span class="p">:</span> <span class="n">DefaultModelBinder</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">override</span> <span class="kt">object</span> <span class="nf">BindModel</span><span class="p">(</span><span class="n">ControllerContext</span> <span class="n">controllerContext</span><span class="p">,</span> <span class="n">ModelBindingContext</span> <span class="n">bindingContext</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">model</span> <span class="p">=</span> <span class="k">base</span><span class="p">.</span><span class="n">BindModel</span><span class="p">(</span><span class="n">controllerContext</span><span class="p">,</span> <span class="n">bindingContext</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">errors</span> <span class="p">=</span> <span class="n">CastleValidationRunner</span><span class="p">.</span><span class="n">GetErrors</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">error</span> <span class="k">in</span> <span class="n">errors</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="kt">var</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="n">error</span><span class="p">.</span><span class="n">PropertyName</span><span class="p">;</span>
</span><span class='line'>              <span class="kt">var</span> <span class="n">name</span> <span class="p">=</span> <span class="n">bindingContext</span><span class="p">.</span><span class="n">ModelName</span> <span class="p">+</span> <span class="s">&quot;.&quot;</span> <span class="p">+</span> <span class="n">propertyName</span><span class="p">;</span>
</span><span class='line'>              <span class="n">bindingContext</span><span class="p">.</span><span class="n">ModelState</span><span class="p">.</span><span class="n">AddModelError</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">ErrorMessage</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">model</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now hook up our new Model Binder in Global.ascx.cs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">void</span> <span class="nf">Application_Start</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ModelBinders</span><span class="p">.</span><span class="n">Binders</span><span class="p">.</span><span class="n">DefaultBinder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ValidatingModelBinder</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we are done.  Controllers can now count on validated models like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[AcceptVerbs(HttpVerbs.Post)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Edit</span><span class="p">(</span><span class="n">Person</span> <span class="n">model</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// In real life, map the model to domain, then save</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
