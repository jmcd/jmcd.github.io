<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Horror | jmcd.io]]></title>
  <link href="http://jmcd.io/blog/categories/horror/atom.xml" rel="self"/>
  <link href="http://jmcd.io/"/>
  <updated>2015-04-06T17:36:46+01:00</updated>
  <id>http://jmcd.io/</id>
  <author>
    <name><![CDATA[John McDowall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Robot Wars Interview Question]]></title>
    <link href="http://jmcd.io/blog/2015/03/20/dirty-wars/"/>
    <updated>2015-03-20T16:10:19+00:00</updated>
    <id>http://jmcd.io/blog/2015/03/20/dirty-wars</id>
    <content type="html"><![CDATA[<p>I recently came across the interview coding test for modeling a &ldquo;Robot Wars&rdquo; game. <a href="https://github.com/ninjanye/RobotWars">The same test as this chap has solved here.</a></p>

<p>I started off doing it The Right Way (tests, lexer, parser), but then thought &ldquo;Wouldn&rsquo;t it be fun to write this as small as possible? You know, just for fun?&rdquo;</p>

<p>So I wrote this obfuscated horror. It would not get you hired anywhere, and it might get you fired, but it was a lot of fun to write.</p>

<pre><code class="c#">class DirtyWar
{
    public IEnumerable&lt;string&gt; Run(string input)
    {
        var lines = input.Split(new[] {'\n', '\r'}, StringSplitOptions.RemoveEmptyEntries);

        Action&lt;Action&lt;int&gt;&gt; x2 = a =&gt; { a(0); a(1); };
        Func&lt;IEnumerable&lt;string&gt;, int[]&gt; atois = ss =&gt; ss.Select(int.Parse).ToArray();

        var bs = new[] {'N', 0, 1, 'E', 1, 0, 'S', 0, -1, 'W', -1, 0};
        var ds = new[] {'M', 0, 'L', -1, 'R', 1};

        var mx = atois(lines[0].Split(' '));

        for (var i = 1; i &lt; lines.Length; i += 2)
        {
            var l0 = lines[i].Split(' ');

            var p = atois(l0.Take(2));
            var b = Array.IndexOf(bs, l0[2][0]);

            foreach (var di in lines[i + 1].Select(c =&gt; Array.IndexOf(ds, c)))
            {
                x2(d =&gt; p[d] += bs[b + 1 + d]*(di == 0 ? 1 : 0));
                b += ds[di + 1]*3;
                b = b &lt; 0 ? bs.Length - 3 : b == bs.Length ? 0 : b;
                x2(d =&gt; p[d] = Math.Max(0, Math.Min(mx[d], p[d])));
            }

            yield return string.Format("{0} {1} {2}", p[0], p[1], (char) bs[b]);
        }
    }
}
</code></pre>

<p>&hellip;and a unit test as evidence of compliance to spec :D</p>

<pre><code class="c#">[TestFixture]
public class TestFixture
{
    [Test]
    public void Test()
    {
        var outputLines = new DirtyWar().Run(@"5 5
1 2 N
LMLMLMLMM
3 3 E
MMRMMRMRRM").ToArray();

        Assert.AreEqual("1 3 N", outputLines[0]);
        Assert.AreEqual("5 1 E", outputLines[1]);
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
